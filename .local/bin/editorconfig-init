#!/bin/bash
set -u

PROGRAM_NAME="$(basename "$0")"
PROGRAM_VERSION=0.0.1

FLAG_DEV=0
FLAG_INTERACTIVE=0
FLAG_OUTPUT_STDOUT=0

available_boolean_values=(
  false
  true
)
available_charset_values=(
  utf-8
)
available_end_of_line_values=(
  cr
  crlf
  lf
)
available_indent_size_values=({4..1})
available_indent_style_values=(
  space
  tab
)
default_charset=utf-8
default_end_of_line=lf
default_indent_size=2
default_indent_style=space
default_insert_final_newline=false
default_output_filepath=./.editorconfig
default_root=true
default_trim_trailing_whitespace=false
editorconfig_charset=
editorconfig_end_of_line=
editorconfig_indent_size=
editorconfig_indent_style=
editorconfig_insert_final_newline=
editorconfig_root=
editorconfig_trim_trailing_whitespace=
output_filepath=

function generate_editorconfig {
  cat << end
# generated by $PROGRAM_NAME v$PROGRAM_VERSION

root = ${editorconfig_root:=$default_root}

[*]
charset = ${editorconfig_charset:=$default_charset}
end_of_line = ${editorconfig_end_of_line:=$default_end_of_line}
indent_size = ${editorconfig_indent_size:=$default_indent_size}
indent_style = ${editorconfig_indent_style:=$default_indent_style}
insert_final_newline = ${editorconfig_insert_final_newline:=$default_insert_final_newline}
trim_trailing_whitespace = ${editorconfig_trim_trailing_whitespace:=$default_trim_trailing_whitespace}
end
}

function main {
  while getopts ':-:hio:qv' opt; do
    case "$opt" in
      - )
        case "$OPTARG" in
          charset=* )
            charset="${OPTARG#*=}"
            select_charset "$charset"
            ;;
          end-of-line=* )
            end_of_line="${OPTARG#*=}"
            select_end_of_line "$end_of_line"
            ;;
          help=* )
            show_help
            exit
            ;;
          indent-size=* )
            indent_size="${OPTARG#*=}"
            select_indent_size "$indent_size"
            ;;
          indent-style=* )
            indent_style="${OPTARG#*=}"
            select_indent_style "$indent_style"
            ;;
          insert-final-newline=* )
            insert_final_newline="${OPTARG#*=}"
            select_insert_final_newline "$insert_final_newline"
            ;;
          interactive )
            set_flag_interactive
            ;;
          output=* )
            output_filepath="${OPTARG#*=}"
            ;;
          quiet=* )
            set_flag_quiet
            ;;
          root=* )
            root="${OPTARG#*=}"
            select_root "$root"
            ;;
          trim-trailing-whitespace=* )
            trim_trailing_whitespace="${OPTARG#*=}"
            select_trim_trailing_whitespace "$trim_trailing_whitespace"
            ;;
          version )
            show_version
            exit
            ;;
        esac
        ;;
      h )
        show_help
        exit
        ;;
      i )
        set_flag_interactive
        ;;
      o )
        output_filepath="$OPTARG"
        ;;
      q )
        set_flag_quiet
        ;;
      v )
        show_version
        exit
        ;;
    esac
  done
  ((FLAG_INTERACTIVE)) && {
    [ -z "$editorconfig_charset" ] && select_charset auto
    [ -z "$editorconfig_end_of_line" ] && select_end_of_line auto
    [ -z "$editorconfig_indent_size" ] && select_indent_size auto
    [ -z "$editorconfig_indent_style" ] && select_indent_style auto
    [ -z "$editorconfig_insert_final_newline" ] && select_insert_final_newline auto
    [ -z "$editorconfig_root" ] && select_root auto
    [ -z "$editorconfig_trim_trailing_whitespace" ] && select_trim_trailing_whitespace auto
  }
  if [ "$output_filepath" = - ]; then
    FLAG_OUTPUT_STDOUT=1
  fi
  generate_editorconfig | if ((FLAG_OUTPUT_STDOUT)); then
    cat
  else
    tee "${output_filepath:=$default_output_filepath}" >/dev/null
  fi
}
function message {
  echo "[$*]"
}

function select_charset {
  charset="$1"
  if [ "$charset" != auto ]; then
    editorconfig_charset="$charset"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_charset="$(printf '%s\n' "${available_charset_values[@]}" | select_from_list charset)"
      if [ -z "$selected_charset" ]; then
        message charset isnt selected
        exit 1
      fi
      editorconfig_charset="$selected_charset"
    fi
  fi
}

function select_end_of_line {
  end_of_line="$1"
  if [ "$end_of_line" != auto ]; then
    editorconfig_end_of_line="$end_of_line"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_end_of_line="$(printf '%s\n' "${available_end_of_line_values[@]}" | select_from_list end_of_line)"
      if [ -z "$selected_end_of_line" ]; then
        message end_of_line isnt selected
        exit 1
      fi
      editorconfig_end_of_line="$selected_end_of_line"
    fi
  fi
}

function select_indent_size {
  indent_size="$1"
  if [ "$indent_size" != auto ]; then
    editorconfig_indent_size="$indent_size"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_indent_size="$(printf '%s\n' "${available_indent_size_values[@]}" | select_from_list indent_size)"
      if [ -z "$selected_indent_size" ]; then
        message indent_size isnt selected
        exit 1
      fi
      editorconfig_indent_size="$selected_indent_size"
    fi
  fi
}

function select_indent_style {
  indent_style="$1"
  if [ "$indent_style" != auto ]; then
    editorconfig_indent_style="$indent_style"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_indent_style="$(printf '%s\n' "${available_indent_style_values[@]}" | select_from_list indent_style)"
      if [ -z "$selected_indent_style" ]; then
        message indent_style isnt selected
        exit 1
      fi
      editorconfig_indent_style="$selected_indent_style"
    fi
  fi
}

function select_insert_final_newline {
  insert_final_newline="$1"
  if [ "$insert_final_newline" != auto ]; then
    editorconfig_insert_final_newline="$insert_final_newline"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_insert_final_newline="$(printf '%s\n' "${available_boolean_values[@]}" | select_from_list insert_final_newline)"
      if [ -z "$selected_insert_final_newline" ]; then
        message insert_final_newline isnt selected
        exit 1
      fi
      editorconfig_insert_final_newline="$selected_insert_final_newline"
    fi
  fi
}

function select_root {
  root="$1"
  if [ "$root" != auto ]; then
    editorconfig_root="$root"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_root="$(printf '%s\n' "${available_boolean_values[@]}" | select_from_list root)"
      if [ -z "$selected_root" ]; then
        message root isnt selected
        exit 1
      fi
      editorconfig_root="$selected_root"
    fi
  fi
}

function select_trim_trailing_whitespace {
  trim_trailing_whitespace="$1"
  if [ "$trim_trailing_whitespace" != auto ]; then
    editorconfig_trim_trailing_whitespace="$trim_trailing_whitespace"
  else
    if ((FLAG_INTERACTIVE)); then
      selected_trim_trailing_whitespace="$(printf '%s\n' "${available_boolean_values[@]}" | select_from_list trim_trailing_whitespace)"
      if [ -z "$selected_trim_trailing_whitespace" ]; then
        message trim_trailing_whitespace isnt selected
        exit 1
      fi
      editorconfig_trim_trailing_whitespace="$selected_trim_trailing_whitespace"
    fi
  fi
}

function select_from_list {
  description="$1"
  fzf --header="$1"
}

function set_flag_interactive {
  FLAG_INTERACTIVE=1
}

function set_flag_quiet {
  FLAG_QUIET=1
}

function show_help {
  cat << end
$PROGRAM_NAME - initialize custom .editorconfig

usage: $PROGRAM_NAME [options]

basic options:

  -h, --help
    show help

  -v, --version
    show version

options:

  configurations

    --charset=[charset]
      select charset.
      if [charset] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "utf-8".
      available values:
        - utf-8
      and more

    --end-of-line=[end_of_line]
      select end_of_line.
      if [end_of_line] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "lf".
      available values:
        - cr
        - crlf
        - lf

    --indent-size=[indent_size]
      select indent_size.
      if [indent_size] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "2".
      available value is number.

    --indent-style=[indent_style]
      select indent_style.
      if [indent_style] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "space".
      available values:
        - space
        - tab

    --insert-final-newline=[insert_final_newline]
      select insert_final_newline.
      if [insert_final_newline] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "false".
      available value is boolean.

    --root=[root]
      select root.
      if [root] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "true".
      available value is boolean.

    --trim-trailing-whitespace=[trim_trailing_whitespace]
      select trim_trailing_whitespace.
      if [trim_trailing_whitespace] is "auto", start interactive select when --interactive is enabled or complete default value.
      default is "false"
      available value is boolean.

  behaviors

    -i, --interactive
      enable interactive select.
      default is disabled.

    -o, --output=[output_filepath]
      select output filepath.
      if output_filepath is "-", standard output is used.
      default is "./.editorconfig".

    -q, --quiet
      TODO: not yet implemented
      disable verbose output.
      default is disabled.

end
}

function show_version {
  echo v$PROGRAM_VERSION
}

main $@
